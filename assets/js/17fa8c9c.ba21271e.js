"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[159],{8156:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>g});const o=JSON.parse('{"id":"logger-integration","title":"Logger Integration","description":"Censor provides built-in handlers for popular logging frameworks, making it easy to protect sensitive data in your logs.","source":"@site/docs/logger-integration.md","sourceDirName":".","slug":"/logger-integration","permalink":"/censor/logger-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/logger-integration.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4}}');var s=r(4848),i=r(8453);const t={sidebar_position:4},a="Logger Integration",l={},g=[{value:"Zap Logger Integration",id:"zap-logger-integration",level:2},{value:"Basic Setup",id:"basic-setup",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"Data Processing",id:"data-processing",level:3},{value:"Supported Logger Patterns",id:"supported-logger-patterns",level:3},{value:"Non-Sugared Logger",id:"non-sugared-logger",level:4},{value:"Sugared Logger",id:"sugared-logger",level:4},{value:"Slog Logger Integration",id:"slog-logger-integration",level:2},{value:"Best Practices",id:"best-practices",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"logger-integration",children:"Logger Integration"})}),"\n",(0,s.jsx)(n.p,{children:"Censor provides built-in handlers for popular logging frameworks, making it easy to protect sensitive data in your logs."}),"\n",(0,s.jsx)(n.h2,{id:"zap-logger-integration",children:"Zap Logger Integration"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"github.com/vpakhuchyi/censor/handlers/zap"})," package provides a configurable handler for the ",(0,s.jsx)(n.code,{children:"go.uber.org/zap"})," library. It allows you to apply censoring to log entries before they reach the core logger."]}),"\n",(0,s.jsx)(n.h3,{id:"basic-setup",children:"Basic Setup"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    censorlog "github.com/vpakhuchyi/censor/handlers/zap"\n    "go.uber.org/zap"\n    "go.uber.org/zap/zapcore"\n)\n\ntype User struct {\n    Name  string `censor:"display"`\n    Email string\n}\n\nfunc main() {\n    // Create a new Censor handler with the default configuration\n    o := zap.WrapCore(func(core zapcore.Core) zapcore.Core {\n        return censorlog.NewHandler(core)\n    })\n\n    // Create a zap logger with the wrapped core\n    l, err := zap.NewProduction(o)\n    if err != nil {\n        panic(err)\n    }\n\n    user := User{Name: "John Doe", Email: "john@example.com"}\n\n    // Log as usual - sensitive data will be automatically masked\n    l.Info("user details", zap.Any("user", user))\n    // Output: {"level":"info",...,"msg":"user details","user":"{Name: John Doe, Email: [CENSORED]}"}\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(n.p,{children:"The Censor handler for Zap provides several configuration options:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Custom Censor Instance"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"handler := censorlog.NewHandler(\n    core,\n    censorlog.WithCensor(customCensor),\n)\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Message Formatting"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"handler := censorlog.NewHandler(\n    core,\n    censorlog.WithMessagesFormat(), // Enable censoring of log messages\n)\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Key Formatting"})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"handler := censorlog.NewHandler(\n    core,\n    censorlog.WithKeysFormat(), // Enable censoring of log keys\n)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"data-processing",children:"Data Processing"}),"\n",(0,s.jsx)(n.p,{children:"The handler processes different parts of log entries:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"msg"}),": The log message itself (optional, requires WithMessagesFormat)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"key"}),": Key names in structured logging (optional, requires WithKeysFormat)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"value"}),": The actual values being logged (always processed)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"supported-logger-patterns",children:"Supported Logger Patterns"}),"\n",(0,s.jsx)(n.h4,{id:"non-sugared-logger",children:"Non-Sugared Logger"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"logger.Info(msg string, fields ...zap.Field)\nlogger.With(fields ...zap.Field).Info(msg string)\n"})}),"\n",(0,s.jsx)(n.h4,{id:"sugared-logger",children:"Sugared Logger"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"logger.Info(args ...interface{})\nlogger.Infof(template string, args ...interface{})\nlogger.Infow(msg string, keysAndValues ...interface{})\nlogger.With(args ...interface{}).Info(args ...interface{})\n"})}),"\n",(0,s.jsx)(n.h2,{id:"slog-logger-integration",children:"Slog Logger Integration"}),"\n",(0,s.jsxs)(n.p,{children:["Censor also provides integration with Go's standard ",(0,s.jsx)(n.code,{children:"log/slog"})," package. Here's how to use it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "log/slog"\n    "os"\n    \n    "github.com/vpakhuchyi/censor"\n    censorlog "github.com/vpakhuchyi/censor/handlers/slog"\n)\n\nfunc main() {\n    // Create a new slog handler with censoring\n    handler := censorlog.NewHandler(\n        slog.NewTextHandler(os.Stdout, nil),\n    )\n\n    // Create a logger with the censoring handler\n    logger := slog.New(handler)\n\n    // Your sensitive data\n    data := map[string]string{\n        "username": "john_doe",\n        "password": "secret123",\n    }\n\n    // Log with automatic censoring\n    logger.Info("user data", "details", data)\n    // Output will mask sensitive fields\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Initialize Early"}),": Set up the Censor handler during logger initialization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configure Appropriately"}),": Use the configuration options that match your security requirements"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test Thoroughly"}),": Verify that sensitive data is properly masked in your logs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor Performance"}),": While Censor is optimized for performance, monitor its impact in your specific use case"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Keep Updated"}),": Stay current with the latest version for security updates and new features"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>a});var o=r(6540);const s={},i=o.createContext(s);function t(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);