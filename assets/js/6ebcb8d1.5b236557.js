"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[366],{7698:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"examples/simple","title":"Simple Examples","description":"Here are some basic examples to help you get started with Censor.","source":"@site/docs/examples/simple.md","sourceDirName":"examples","slug":"/examples/simple","permalink":"/censor/examples/simple","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/examples/simple.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Data Leak Prevention","permalink":"/censor/examples/data-leak-prevention"},"next":{"title":"Complex Examples","permalink":"/censor/examples/complex"}}');var a=s(4848),t=s(8453);const r={sidebar_position:1},o="Simple Examples",c={},l=[{value:"Basic String Masking",id:"basic-string-masking",level:2},{value:"Struct Field Masking",id:"struct-field-masking",level:2},{value:"Map Handling",id:"map-handling",level:2},{value:"Slice Processing",id:"slice-processing",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Basic Logging Integration",id:"basic-logging-integration",level:2},{value:"Best Practices for Simple Usage",id:"best-practices-for-simple-usage",level:2}];function m(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"simple-examples",children:"Simple Examples"})}),"\n",(0,a.jsx)(e.p,{children:"Here are some basic examples to help you get started with Censor."}),"\n",(0,a.jsx)(e.h2,{id:"basic-string-masking",children:"Basic String Masking"}),"\n",(0,a.jsx)(e.p,{children:"The simplest use case is masking sensitive data in strings:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Using the default global instance\n    text := "My password is secret123"\n    fmt.Println(censor.Format(text))\n    // Output: My password is [CENSORED]\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"struct-field-masking",children:"Struct Field Masking"}),"\n",(0,a.jsx)(e.p,{children:"Control which fields are visible using struct tags:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\ntype User struct {\n    ID       string `censor:"display"` // Will be visible\n    Username string `censor:"display"` // Will be visible\n    Email    string                   // Will be masked\n    Password string                   // Will be masked\n}\n\nfunc main() {\n    user := User{\n        ID:       "123",\n        Username: "johndoe",\n        Email:    "john@example.com",\n        Password: "secret123",\n    }\n\n    fmt.Println(censor.Format(user))\n    // Output: {ID: 123, Username: johndoe, Email: [CENSORED], Password: [CENSORED]}\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"map-handling",children:"Map Handling"}),"\n",(0,a.jsx)(e.p,{children:"Censor can handle maps with various key and value types:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Simple map\n    data := map[string]string{\n        "username": "johndoe",\n        "password": "secret123",\n        "email":    "john@example.com",\n    }\n\n    fmt.Println(censor.Format(data))\n    // Output: map[email: [CENSORED], password: [CENSORED], username: johndoe]\n\n    // Nested map\n    nested := map[string]interface{}{\n        "user": map[string]string{\n            "id":       "123",\n            "password": "secret",\n        },\n    }\n\n    fmt.Println(censor.Format(nested))\n    // Output: map[user: map[id: 123, password: [CENSORED]]]\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"slice-processing",children:"Slice Processing"}),"\n",(0,a.jsx)(e.p,{children:"Working with slices and arrays:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Slice of sensitive data\n    emails := []string{\n        "user1@example.com",\n        "user2@example.com",\n    }\n\n    fmt.Println(censor.Format(emails))\n    // Output: [[CENSORED], [CENSORED]]\n\n    // Slice of structs\n    users := []User{\n        {ID: "1", Username: "john", Email: "john@example.com"},\n        {ID: "2", Username: "jane", Email: "jane@example.com"},\n    }\n\n    fmt.Println(censor.Format(users))\n    // Output: [{ID: 1, Username: john, Email: [CENSORED]}, {ID: 2, Username: jane, Email: [CENSORED]}]\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,a.jsx)(e.p,{children:"Simple configuration example:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Create a custom configuration\n    cfg := censor.Config{\n        Formatter: censor.FormatterConfig{\n            MaskValue: "***",\n            ExcludePatterns: []string{\n                `\\w+@\\w+\\.\\w+`, // Email pattern\n            },\n        },\n    }\n\n    // Create a new instance with the configuration\n    c := censor.NewWithOpts(censor.WithConfig(&cfg))\n\n    data := "Contact us at support@example.com"\n    fmt.Println(c.Format(data))\n    // Output: Contact us at ***\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"basic-logging-integration",children:"Basic Logging Integration"}),"\n",(0,a.jsx)(e.p,{children:"Simple example with standard logging:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-go",children:'package main\n\nimport (\n    "log"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    user := User{\n        ID:       "123",\n        Username: "johndoe",\n        Email:    "john@example.com",\n        Password: "secret123",\n    }\n\n    // Log with sensitive data masked\n    log.Printf("Processing user: %s", censor.Format(user))\n    // Output: Processing user: {ID: 123, Username: johndoe, Email: [CENSORED], Password: [CENSORED]}\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"best-practices-for-simple-usage",children:"Best Practices for Simple Usage"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Default Configuration"}),": Start with default configuration for simple cases"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Struct Tags"}),": Use ",(0,a.jsx)(e.code,{children:'censor:"display"'})," tags to explicitly mark safe fields"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Type Safety"}),": Let Censor handle type conversion and formatting"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Consistent Usage"}),": Use ",(0,a.jsx)(e.code,{children:"censor.Format()"})," consistently across your application"]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Error Handling"}),": Always check for errors when using custom configuration"]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(m,{...n})}):m(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>o});var i=s(6540);const a={},t=i.createContext(a);function r(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);