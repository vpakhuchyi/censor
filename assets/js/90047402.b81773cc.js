"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[211],{5263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"type-handling/basic-types","title":"Basic Types","description":"Censor provides comprehensive support for Go\'s basic types. This guide details how each basic type is handled by Censor.","source":"@site/docs/type-handling/basic-types.md","sourceDirName":"type-handling","slug":"/type-handling/basic-types","permalink":"/censor/type-handling/basic-types","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/type-handling/basic-types.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1744745893000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Overview","permalink":"/censor/type-handling/overview"},"next":{"title":"Complex Types","permalink":"/censor/type-handling/complex-types"}}');var i=t(4848),r=t(8453);const a={sidebar_position:1},l="Basic Types",o={},d=[{value:"String",id:"string",level:2},{value:"String Patterns",id:"string-patterns",level:3},{value:"Numeric Types",id:"numeric-types",level:2},{value:"Integers",id:"integers",level:3},{value:"Unsigned Integers",id:"unsigned-integers",level:3},{value:"Floating Point",id:"floating-point",level:3},{value:"Boolean",id:"boolean",level:2},{value:"Time",id:"time",level:2},{value:"Pointers",id:"pointers",level:2},{value:"Nil Values",id:"nil-values",level:2},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basic-types",children:"Basic Types"})}),"\n",(0,i.jsx)(n.p,{children:"Censor provides comprehensive support for Go's basic types. This guide details how each basic type is handled by Censor."}),"\n",(0,i.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,i.jsx)(n.p,{children:"Strings are masked by default, but can be configured to be displayed using struct tags."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"` // Always visible.\n    Email    string                    // Masked by default.\n    Password string `censor:"mask"`    // Explicitly masked.\n}\n\nuser := User{\n    ID:       "123",\n    Email:    "user@example.com",\n    Password: "secret123",\n}\n\n// TEXT output: {ID:123 Email:[CENSORED] Password:[CENSORED]}.\n// JSON output: {"ID":"123","Email":"[CENSORED]","Password":"[CENSORED]"}.\n'})}),"\n",(0,i.jsx)(n.h3,{id:"string-patterns",children:"String Patterns"}),"\n",(0,i.jsx)(n.p,{children:"You can exclude specific string patterns from masking:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'c := censor.New(\n    censor.WithExcludePatterns([]string{\n        `\\d{4}-\\d{4}-\\d{4}-\\d{4}`, // Credit card numbers.\n        `\\d{3}-\\d{2}-\\d{4}`,       // SSN.\n    }),\n)\n\n// Credit card number will not be masked.\ncard := "4111-1111-1111-1111"\n// Output: 4111-1111-1111-1111.\n\n// SSN will not be masked.\nssn := "123-45-6789"\n// Output: 123-45-6789.\n\n// Other strings will still be masked.\nemail := "user@example.com"\n// Output: [CENSORED].\n'})}),"\n",(0,i.jsx)(n.h2,{id:"numeric-types",children:"Numeric Types"}),"\n",(0,i.jsx)(n.p,{children:"Numeric types are displayed as is, without masking."}),"\n",(0,i.jsx)(n.h3,{id:"integers",children:"Integers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"`\n    Age      int\n    Count    int8\n    Score    int16\n    Points   int32\n    Balance  int64\n}\n\nuser := User{\n    ID:       "123",\n    Age:      30,\n    Count:    42,\n    Score:    100,\n    Points:   1000,\n    Balance:  1000000,\n}\n\n// TEXT output: {ID:123 Age:30 Count:42 Score:100 Points:1000 Balance:1000000}.\n// JSON output: {"ID":"123","Age":30,"Count":42,"Score":100,"Points":1000,"Balance":1000000}.\n'})}),"\n",(0,i.jsx)(n.h3,{id:"unsigned-integers",children:"Unsigned Integers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"`\n    Count    uint\n    Small    uint8\n    Medium   uint16\n    Large    uint32\n    Huge     uint64\n}\n\nuser := User{\n    ID:       "123",\n    Count:    42,\n    Small:    255,\n    Medium:   65535,\n    Large:    4294967295,\n    Huge:     18446744073709551615,\n}\n\n// TEXT output: {ID:123 Count:42 Small:255 Medium:65535 Large:4294967295 Huge:18446744073709551615}.\n// JSON output: {"ID":"123","Count":42,"Small":255,"Medium":65535,"Large":4294967295,"Huge":18446744073709551615}.\n'})}),"\n",(0,i.jsx)(n.h3,{id:"floating-point",children:"Floating Point"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"`\n    Score    float32\n    Balance  float64\n}\n\nuser := User{\n    ID:       "123",\n    Score:    98.5,\n    Balance:  1234.5678,\n}\n\n// TEXT output: {ID:123 Score:98.5 Balance:1234.5678}.\n// JSON output: {"ID":"123","Score":98.5,"Balance":1234.5678}.\n'})}),"\n",(0,i.jsx)(n.h2,{id:"boolean",children:"Boolean"}),"\n",(0,i.jsx)(n.p,{children:"Boolean values are displayed as is, without masking."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"`\n    Active   bool\n    Verified bool\n}\n\nuser := User{\n    ID:       "123",\n    Active:   true,\n    Verified: false,\n}\n\n// TEXT output: {ID:123 Active:true Verified:false}.\n// JSON output: {"ID":"123","Active":true,"Verified":false}.\n'})}),"\n",(0,i.jsx)(n.h2,{id:"time",children:"Time"}),"\n",(0,i.jsx)(n.p,{children:"Time values are formatted according to the configuration."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID        string    `censor:"display"`\n    CreatedAt time.Time\n    UpdatedAt time.Time\n}\n\nuser := User{\n    ID:        "123",\n    CreatedAt: time.Date(2023, 1, 1, 12, 0, 0, 0, time.UTC),\n    UpdatedAt: time.Date(2023, 1, 2, 12, 0, 0, 0, time.UTC),\n}\n\n// With default time format.\n// TEXT output: {ID:123 CreatedAt:2023-01-01T12:00:00Z UpdatedAt:2023-01-02T12:00:00Z}.\n// JSON output: {"ID":"123","CreatedAt":"2023-01-01T12:00:00Z","UpdatedAt":"2023-01-02T12:00:00Z"}.\n\n// With custom time format.\nc := censor.New(\n    censor.WithTimeFormat("2006-01-02"),\n)\n// TEXT output: {ID:123 CreatedAt:2023-01-01 UpdatedAt:2023-01-02}.\n// JSON output: {"ID":"123","CreatedAt":"2023-01-01","UpdatedAt":"2023-01-02"}.\n'})}),"\n",(0,i.jsx)(n.h2,{id:"pointers",children:"Pointers"}),"\n",(0,i.jsx)(n.p,{children:"Pointers are dereferenced and processed according to their underlying type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       *string `censor:"display"`\n    Email    *string\n    Password *string `censor:"mask"`\n}\n\nid := "123"\nemail := "user@example.com"\npassword := "secret123"\n\nuser := User{\n    ID:       &id,\n    Email:    &email,\n    Password: &password,\n}\n\n// TEXT output: {ID:123 Email:[CENSORED] Password:[CENSORED]}.\n// JSON output: {"ID":"123","Email":"[CENSORED]","Password":"[CENSORED]"}.\n'})}),"\n",(0,i.jsx)(n.h2,{id:"nil-values",children:"Nil Values"}),"\n",(0,i.jsx)(n.p,{children:"Nil values are handled appropriately for each type."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       *string `censor:"display"`\n    Email    *string\n    Password *string `censor:"mask"`\n}\n\nuser := User{\n    ID:       nil,\n    Email:    nil,\n    Password: nil,\n}\n\n// TEXT output: {ID:<nil> Email:<nil> Password:<nil>}.\n// JSON output: {"ID":null,"Email":null,"Password":null}.\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,i.jsx)(n.p,{children:"Here's a complete example showing how Censor handles various basic types:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Create a Censor instance with custom configuration\n    c := censor.New(\n        censor.WithMaskValue("[REDACTED]"),\n        censor.WithTimeFormat("2006-01-02"),\n    )\n\n    // Define a struct with various basic types\n    type User struct {\n        ID          string     `censor:"display"`\n        Email       string\n        Password    string     `censor:"mask"`\n        Age         int\n        Score       float64\n        Active      bool\n        CreatedAt   time.Time\n        UpdatedAt   *time.Time\n        APIKey      *string\n    }\n\n    // Create a user with various basic types\n    updatedAt := time.Date(2023, 1, 2, 12, 0, 0, 0, time.UTC)\n    apiKey := "sk_live_123456789"\n\n    user := User{\n        ID:          "123",\n        Email:       "user@example.com",\n        Password:    "secret123",\n        Age:         30,\n        Score:       98.5,\n        Active:      true,\n        CreatedAt:   time.Date(2023, 1, 1, 12, 0, 0, 0, time.UTC),\n        UpdatedAt:   &updatedAt,\n        APIKey:      &apiKey,\n    }\n\n    // Process the data\n    masked := c.Process(user)\n    fmt.Printf("%+v\\n", masked)\n    // TEXT output: {ID:123 Email:[REDACTED] Password:[REDACTED] Age:30 Score:98.5 Active:true CreatedAt:2023-01-01 UpdatedAt:2023-01-02 APIKey:[REDACTED]}\n    // JSON output: {"ID":"123","Email":"[REDACTED]","Password":"[REDACTED]","Age":30,"Score":98.5,"Active":true,"CreatedAt":"2023-01-01","UpdatedAt":"2023-01-02","APIKey":"[REDACTED]"}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"complex-types",children:"Complex Types"})]}),"\n",(0,i.jsxs)(n.li,{children:["Check out ",(0,i.jsx)(n.a,{href:"special-types",children:"Special Types"})]}),"\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.a,{href:"format-specific",children:"Format-Specific"})," handling"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);