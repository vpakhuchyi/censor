"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[976],{7879:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"intro","title":"What is Censor","description":"Have you ever encountered a situation where a new attribute containing sensitive data was added to a struct, and somewhere in a different package that struct value was passed to a logger, resulting in sensitive data being leaked? In large codebases with multiple contributors, these mistakes happen more often than you might think.","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/censor/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/intro.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1744454824000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","next":{"title":"Getting Started","permalink":"/censor/getting-started"}}');var i=n(4848),r=n(8453);const a={sidebar_position:1},o="What is Censor",l={},d=[{value:"Key Features",id:"key-features",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const t={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"what-is-censor",children:"What is Censor"})}),"\n",(0,i.jsx)(t.p,{children:"Have you ever encountered a situation where a new attribute containing sensitive data was added to a struct, and somewhere in a different package that struct value was passed to a logger, resulting in sensitive data being leaked? In large codebases with multiple contributors, these mistakes happen more often than you might think."}),"\n",(0,i.jsx)(t.p,{children:"Censor helps minimize the risk of such situations. Once configured, Censor automatically inspects structs and strings using specific rules to determine if values should be masked or displayed. What's crucial is that Censor follows a secure-by-default approach: if a struct field has no explicit Censor tag marking it as safe to display, it will be masked. This means even if someone forgets to add a tag or isn't aware of Censor's presence, sensitive data remains protected by default, while still allowing engineers to manually adjust visibility when needed."}),"\n",(0,i.jsx)(t.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Practical Data Protection"}),": Helps reduce the risk of exposing sensitive fields in structs. While not a silver bullet for all security concerns, Censor adds an extra layer of protection for common data exposure scenarios."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Two Output Formats"}),": Supports both TEXT and JSON output formats, covering the most common logging and data exchange needs."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Logger Framework Support"}),": Works with popular logging frameworks like Zap, Slog, and Zerolog. Setup requires some configuration, after which logging operations can proceed with added protection."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Basic Customization"}),': Modify the default "[CENSORED]" mask value or set up regex patterns to handle specific data formats according to your needs.']}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Default Masking Approach"}),": Uses a conservative approach where fields remain masked unless explicitly tagged to be visible, helping to reduce accidental exposure."]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Support for Common Types"}),": Handles standard Go types including strings, structs, maps, and slices, though some complex or custom types may require additional handling."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(t.p,{children:"Ready to get started? Check out these guides:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"getting-started",children:"Getting Started"})," - Installation and basic usage"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"configuration",children:"Configuration"})," - Customization options"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"type-handling/overview",children:"Type Support"})," - Supported Go types"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"logger-handlers/zap",children:"Logger Integration"})," - Logger integration"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"examples/data-leak-prevention",children:"Examples"})," - Real-world usage scenarios"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);