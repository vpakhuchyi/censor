"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[873],{8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},8730:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"configuration","title":"Configuration","description":"Censor provides flexible configuration options to customize its behavior. This guide covers the default configuration and how to customize it.","source":"@site/docs/configuration.md","sourceDirName":".","slug":"/configuration","permalink":"/censor/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/configuration.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docs","previous":{"title":"Getting Started","permalink":"/censor/getting-started"},"next":{"title":"Overview","permalink":"/censor/type-handling/overview"}}');var r=t(4848),i=t(8453);const o={sidebar_position:3},a="Configuration",c={},l=[{value:"Default Configuration",id:"default-configuration",level:2},{value:"Custom Configuration",id:"custom-configuration",level:2},{value:"Output Formats",id:"output-formats",level:2},{value:"TEXT Format",id:"text-format",level:3},{value:"JSON Format",id:"json-format",level:3},{value:"Masking Options",id:"masking-options",level:2},{value:"Custom Mask Value",id:"custom-mask-value",level:3},{value:"Exclude Patterns",id:"exclude-patterns",level:3},{value:"Struct Tag Options",id:"struct-tag-options",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Type Handlers",id:"custom-type-handlers",level:3},{value:"Field Name Mapping",id:"field-name-mapping",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"configuration",children:"Configuration"})}),"\n",(0,r.jsx)(n.p,{children:"Censor provides flexible configuration options to customize its behavior. This guide covers the default configuration and how to customize it."}),"\n",(0,r.jsx)(n.h2,{id:"default-configuration",children:"Default Configuration"}),"\n",(0,r.jsx)(n.p,{children:"When you create a new Censor instance without any options, it uses the following default configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"c := censor.New()\n"})}),"\n",(0,r.jsx)(n.p,{children:"Default settings:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Formatter"}),": TEXT format (human-readable)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Mask Value"}),": ",(0,r.jsx)(n.code,{children:"[CENSORED]"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Exclude Patterns"}),": None"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Field Name Mapping"}),": None"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"custom-configuration",children:"Custom Configuration"}),"\n",(0,r.jsx)(n.p,{children:"You can customize Censor's behavior by providing options when creating a new instance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'c := censor.New(\n    censor.WithFormatter(censor.JSONFormatter()),\n    censor.WithMaskValue("[REDACTED]"),\n    censor.WithExcludePatterns([]string{`\\d{4}-\\d{4}-\\d{4}-\\d{4}`}),\n)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"output-formats",children:"Output Formats"}),"\n",(0,r.jsx)(n.p,{children:"Censor supports two output formats: TEXT and JSON."}),"\n",(0,r.jsx)(n.h3,{id:"text-format",children:"TEXT Format"}),"\n",(0,r.jsx)(n.p,{children:"The TEXT format is human-readable and is the default format:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"c := censor.New(\n    censor.WithFormatter(censor.TextFormatter()),\n)\n\n// Example output: {ID:123 Email:[CENSORED] Password:[CENSORED]}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"json-format",children:"JSON Format"}),"\n",(0,r.jsx)(n.p,{children:"The JSON format is useful for structured data and API responses:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'c := censor.New(\n    censor.WithFormatter(censor.JSONFormatter()),\n)\n\n// Example output: {"ID":"123","Email":"[CENSORED]","Password":"[CENSORED]"}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"masking-options",children:"Masking Options"}),"\n",(0,r.jsx)(n.h3,{id:"custom-mask-value",children:"Custom Mask Value"}),"\n",(0,r.jsx)(n.p,{children:"Change the default mask value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'c := censor.New(\n    censor.WithMaskValue("[REDACTED]"),\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"exclude-patterns",children:"Exclude Patterns"}),"\n",(0,r.jsx)(n.p,{children:"Define patterns to exclude from masking:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"c := censor.New(\n    censor.WithExcludePatterns([]string{\n        `\\d{4}-\\d{4}-\\d{4}-\\d{4}`, // Credit card numbers\n        `\\d{3}-\\d{2}-\\d{4}`,       // SSN\n    }),\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"struct-tag-options",children:"Struct Tag Options"}),"\n",(0,r.jsx)(n.p,{children:"Control field visibility using struct tags:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"` // Always visible\n    Email    string                    // Masked by default\n    Password string `censor:"mask"`    // Explicitly masked\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"custom-type-handlers",children:"Custom Type Handlers"}),"\n",(0,r.jsx)(n.p,{children:"Register custom handlers for specific types:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type CustomType string\n\nc := censor.New(\n    censor.WithTypeHandler(reflect.TypeOf(CustomType("")), func(v interface{}) string {\n        return "[CUSTOM_MASKED]"\n    }),\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"field-name-mapping",children:"Field Name Mapping"}),"\n",(0,r.jsx)(n.p,{children:"Map struct field names to custom names:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"c := censor.New(\n    censor.WithFieldNameMapper(func(name string) string {\n        return strings.ToUpper(name)\n    }),\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example showing various configuration options:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Create a Censor instance with custom configuration\n    c := censor.New(\n        // Use JSON formatter\n        censor.WithFormatter(censor.JSONFormatter()),\n\n        // Custom mask value\n        censor.WithMaskValue("[REDACTED]"),\n\n        // Exclude patterns\n        censor.WithExcludePatterns([]string{\n            `\\d{4}-\\d{4}-\\d{4}-\\d{4}`,\n            `\\d{3}-\\d{2}-\\d{4}`,\n        }),\n\n        // Custom field name mapper\n        censor.WithFieldNameMapper(func(name string) string {\n            return strings.ToUpper(name)\n        }),\n    )\n\n    // Define a struct with sensitive data\n    type User struct {\n        ID       string `censor:"display"`\n        Email    string\n        Password string `censor:"mask"`\n    }\n\n    // Create a user\n    user := User{\n        ID:       "123",\n        Email:    "user@example.com",\n        Password: "secret123",\n    }\n\n    // Process the data\n    masked := c.Process(user)\n    fmt.Printf("%+v\\n", masked)\n    // Output: {"ID":"123","EMAIL":"[REDACTED]","PASSWORD":"[REDACTED]"}\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"type-handling/overview",children:"Type Support"})," options"]}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"logger-handlers/zap",children:"Logger Integration"})," for logging frameworks"]}),"\n",(0,r.jsxs)(n.li,{children:["Check out ",(0,r.jsx)(n.a,{href:"examples/data-leak-prevention",children:"Examples"})," for real-world usage"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);