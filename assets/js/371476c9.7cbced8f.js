"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[697],{1818:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"logger-handlers/zap","title":"Zap Handler","description":"The Zap handler provides integration with the go.uber.org/zap logging library, allowing you to automatically mask sensitive data in your logs.","source":"@site/docs/logger-handlers/zap.md","sourceDirName":"logger-handlers","slug":"/logger-handlers/zap","permalink":"/censor/logger-handlers/zap","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/logger-handlers/zap.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1744485424000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Format-Specific","permalink":"/censor/type-handling/format-specific"},"next":{"title":"Slog","permalink":"/censor/logger-handlers/slog"}}');var i=s(4848),o=s(8453);const t={sidebar_position:1},a="Zap Handler",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Understanding Logger Components",id:"understanding-logger-components",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Supported Logger Methods",id:"supported-logger-methods",level:2},{value:"Unsugared Logger Methods",id:"unsugared-logger-methods",level:3},{value:"Sugared Logger Methods",id:"sugared-logger-methods",level:3},{value:"Important Notes",id:"important-notes",level:2},{value:"Next Steps",id:"next-steps",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"zap-handler",children:"Zap Handler"})}),"\n",(0,i.jsxs)(n.p,{children:["The Zap handler provides integration with the ",(0,i.jsx)(n.a,{href:"https://github.com/uber-go/zap",children:"go.uber.org/zap"})," logging library, allowing you to automatically mask sensitive data in your logs."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The Zap handler is a configurable logging handler that applies censoring to log entries and fields, overriding the original values before passing them to the core. It's designed to work with both sugared and unsugared Zap loggers, though with some limitations."}),"\n",(0,i.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple example of how to use the Zap handler:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    censorlog "github.com/vpakhuchyi/censor/handlers/zap"\n    "go.uber.org/zap"\n    "go.uber.org/zap/zapcore"\n)\n\ntype User struct {\n    Name  string `censor:"display"`\n    Email string\n}\n\nfunc main() {\n    // Create a user with sensitive data\n    u := User{\n        Name:  "John Doe",\n        Email: "example@gmail.com",\n    }\n\n    // Create a Zap logger with the Censor handler\n    o := zap.WrapCore(func(core zapcore.Core) zapcore.Core {\n        return censorlog.NewHandler(core)\n    })\n\n    l, err := zap.NewProduction(o)\n    if err != nil {\n        // Handle error\n    }\n\n    // Log the user data - sensitive fields will be automatically masked\n    l.Info("user", zap.Any("payload", u))\n    // Output: {"level":"info",...,"msg":"user","payload":"{Name: John Doe, Email: [CENSORED]}"}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"understanding-logger-components",children:"Understanding Logger Components"}),"\n",(0,i.jsx)(n.p,{children:"When working with the Zap logger, we can identify three main components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"msg"}),': The main log message (e.g., "user" in the example above)']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"key"}),': The field name (e.g., "payload" in the example above)']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"value"}),": The actual data being logged (e.g., the User struct in the example above)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'By default, Censor processes only the "value" component to minimize overhead, as "msg" and "key" typically contain static strings or field names rather than sensitive data. This design choice helps maintain performance while still protecting sensitive information.'}),"\n",(0,i.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsx)(n.p,{children:"The Zap handler provides the following configuration option:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"WithCensor(censor *censor.Processor)"}),": Sets a custom Censor processor instance for the Zap handler. If not provided, a default Censor processor is used."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Example with custom configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Create a custom Censor instance\nc := censor.New()\n\n// Create a Zap logger with custom Censor configuration\no := zap.WrapCore(func(core zapcore.Core) zapcore.Core {\n    return censorlog.NewHandler(core, censorlog.WithCensor(c))\n})\n\nl, err := zap.NewProduction(o)\nif err != nil {\n    // Handle error\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"supported-logger-methods",children:"Supported Logger Methods"}),"\n",(0,i.jsx)(n.h3,{id:"unsugared-logger-methods",children:"Unsugared Logger Methods"}),"\n",(0,i.jsx)(n.p,{children:"The handler fully supports the following unsugared logger methods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Basic logging methods\nInfo(msg string, fields ...zap.Field)\nDebug(msg string, fields ...zap.Field)\nWarn(msg string, fields ...zap.Field)\nError(msg string, fields ...zap.Field)\nPanic(msg string, fields ...zap.Field)\nFatal(msg string, fields ...zap.Field)\n\n// With context methods\nWith(fields ...zap.Field).Info(msg string, fields ...zap.Field)\nWith(fields ...zap.Field).Debug(msg string, fields ...zap.Field)\nWith(fields ...zap.Field).Warn(msg string, fields ...zap.Field)\nWith(fields ...zap.Field).Error(msg string, fields ...zap.Field)\nWith(fields ...zap.Field).Panic(msg string, fields ...zap.Field)\nWith(fields ...zap.Field).Fatal(msg string, fields ...zap.Field)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sugared-logger-methods",children:"Sugared Logger Methods"}),"\n",(0,i.jsx)(n.p,{children:"The handler also supports the following sugared logger methods:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Basic logging methods\nInfow(msg string, keysAndValues ...interface{})\nDebugw(msg string, keysAndValues ...interface{})\nWarnw(msg string, keysAndValues ...interface{})\nErrorw(msg string, keysAndValues ...interface{})\nPanicw(msg string, keysAndValues ...interface{})\nFatalw(msg string, keysAndValues ...interface{})\n\n// With context methods\nWith(args ...interface{}).Infow(msg string, keysAndValues ...interface{})\nWith(args ...interface{}).Debugw(msg string, keysAndValues ...interface{})\nWith(args ...interface{}).Warnw(msg string, keysAndValues ...interface{})\nWith(args ...interface{}).Errorw(msg string, keysAndValues ...interface{})\nWith(args ...interface{}).Panicw(msg string, keysAndValues ...interface{})\nWith(args ...interface{}).Fatalw(msg string, keysAndValues ...interface{})\n"})}),"\n",(0,i.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Method Support"}),": Only the methods listed above are fully supported. Other methods that use ",(0,i.jsx)(n.code,{children:"fmt.Sprint"}),"-like functions to concatenate arguments are not supported, as they pass data to the Censor handler as single formatted strings, preventing individual value processing."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance Considerations"}),': The handler is optimized to minimize overhead by only processing the "value" component of log entries. This design choice helps maintain performance while still protecting sensitive information.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Compatibility"}),": While the handler works seamlessly with the unsugared logger, its compatibility with the sugared logger is more limited. It's recommended to use the unsugared logger for the most reliable results."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"/censor/type-handling/overview",children:"Type Support"})," options"]}),"\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.a,{href:"/censor/configuration",children:"Configuration"})," for customization options"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out ",(0,i.jsx)(n.a,{href:"/censor/examples/data-leak-prevention",children:"Examples"})," for real-world usage"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var r=s(6540);const i={},o=r.createContext(i);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);