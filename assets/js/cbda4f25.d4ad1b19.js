"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[864],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>t});var s=r(6540);const o={},a=s.createContext(o);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},9888:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"examples/data-leak-prevention","title":"Data Leak Prevention Examples","description":"This guide provides examples of common scenarios where Censor can be used to prevent data leaks.","source":"@site/docs/examples/data-leak-prevention.md","sourceDirName":"examples","slug":"/examples/data-leak-prevention","permalink":"/censor/examples/data-leak-prevention","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor/tree/main/documentation/docs/examples/data-leak-prevention.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Zerolog","permalink":"/censor/logger-handlers/zerolog"},"next":{"title":"Simple Examples","permalink":"/censor/examples/simple"}}');var o=r(4848),a=r(8453);const i={sidebar_position:1},t="Data Leak Prevention Examples",l={},d=[{value:"Logging Sensitive Data",id:"logging-sensitive-data",level:2},{value:"Problem",id:"problem",level:3},{value:"Solution",id:"solution",level:3},{value:"API Responses",id:"api-responses",level:2},{value:"Problem",id:"problem-1",level:3},{value:"Solution",id:"solution-1",level:3},{value:"Error Messages",id:"error-messages",level:2},{value:"Problem",id:"problem-2",level:3},{value:"Solution",id:"solution-2",level:3},{value:"Debug Information",id:"debug-information",level:2},{value:"Problem",id:"problem-3",level:3},{value:"Solution",id:"solution-3",level:3},{value:"Database Queries",id:"database-queries",level:2},{value:"Problem",id:"problem-4",level:3},{value:"Solution",id:"solution-4",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"data-leak-prevention-examples",children:"Data Leak Prevention Examples"})}),"\n",(0,o.jsx)(n.p,{children:"This guide provides examples of common scenarios where Censor can be used to prevent data leaks."}),"\n",(0,o.jsx)(n.h2,{id:"logging-sensitive-data",children:"Logging Sensitive Data"}),"\n",(0,o.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// BAD: Logging sensitive data directly\nlogger.Info("user login", zap.String("email", user.Email), zap.String("password", user.Password))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"solution",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// GOOD: Using Censor to mask sensitive data\nlogger := zap.New(censorlog.NewHandler(...))\nlogger.Info("user login", zap.Any("user", user))\n// Output: {"level":"info","msg":"user login","user":{"Email":"[CENSORED]","Password":"[CENSORED]"}}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"api-responses",children:"API Responses"}),"\n",(0,o.jsx)(n.h3,{id:"problem-1",children:"Problem"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"// BAD: Returning sensitive data in API responses\nfunc (h *Handler) GetUser(w http.ResponseWriter, r *http.Request) {\n    user := h.getUserFromDB()\n    json.NewEncoder(w).Encode(user) // Might expose sensitive fields\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"solution-1",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"// GOOD: Using Censor to sanitize API responses\nfunc (h *Handler) GetUser(w http.ResponseWriter, r *http.Request) {\n    user := h.getUserFromDB()\n    c := censor.New()\n    sanitized := c.Process(user)\n    json.NewEncoder(w).Encode(sanitized)\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"error-messages",children:"Error Messages"}),"\n",(0,o.jsx)(n.h3,{id:"problem-2",children:"Problem"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// BAD: Including sensitive data in error messages\nif err != nil {\n    return fmt.Errorf("failed to process payment for card %s: %v", card.Number, err)\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"solution-2",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// GOOD: Using Censor for error messages\nif err != nil {\n    c := censor.New()\n    maskedCard := c.Process(card)\n    return fmt.Errorf("failed to process payment: %v", err)\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"debug-information",children:"Debug Information"}),"\n",(0,o.jsx)(n.h3,{id:"problem-3",children:"Problem"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// BAD: Including sensitive data in debug logs\ndebug.Printf("Processing request: %+v", request)\n'})}),"\n",(0,o.jsx)(n.h3,{id:"solution-3",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// GOOD: Using Censor for debug information\nc := censor.New()\ndebug.Printf("Processing request: %v", c.Process(request))\n'})}),"\n",(0,o.jsx)(n.h2,{id:"database-queries",children:"Database Queries"}),"\n",(0,o.jsx)(n.h3,{id:"problem-4",children:"Problem"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// BAD: Logging raw SQL queries with sensitive data\nlogger.Debug("executing query", zap.String("query", query), zap.Any("params", params))\n'})}),"\n",(0,o.jsx)(n.h3,{id:"solution-4",children:"Solution"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// GOOD: Using Censor for query parameters\nc := censor.New()\nlogger.Debug("executing query", \n    zap.String("query", query), \n    zap.Any("params", c.Process(params)))\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's a complete example showing how to use Censor in a web application:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n    "github.com/vpakhuchyi/censor"\n    "github.com/vpakhuchyi/censor/logger/zap"\n    "go.uber.org/zap"\n)\n\ntype User struct {\n    ID       string `json:"id" censor:"display"`\n    Email    string `json:"email"`\n    Password string `json:"password"`\n    APIKey   string `json:"api_key"`\n}\n\ntype Handler struct {\n    logger *zap.Logger\n    censor *censor.Censor\n}\n\nfunc NewHandler() *Handler {\n    // Create a Censor instance\n    c := censor.New()\n\n    // Create a logger with Censor handler\n    logger := zap.New(censorlog.NewHandler(...))\n\n    return &Handler{\n        logger: logger,\n        censor: c,\n    }\n}\n\nfunc (h *Handler) GetUser(w http.ResponseWriter, r *http.Request) {\n    user := h.getUserFromDB()\n\n    // Log the request (safely)\n    h.logger.Info("processing user request",\n        zap.Any("user", user),\n        zap.String("path", r.URL.Path))\n\n    // Return sanitized response\n    sanitized := h.censor.Process(user)\n    json.NewEncoder(w).Encode(sanitized)\n}\n\nfunc (h *Handler) UpdateUser(w http.ResponseWriter, r *http.Request) {\n    var user User\n    if err := json.NewDecoder(r.Body).Decode(&user); err != nil {\n        h.logger.Error("failed to decode request", zap.Error(err))\n        http.Error(w, "Invalid request", http.StatusBadRequest)\n        return\n    }\n\n    // Log the update (safely)\n    h.logger.Info("updating user",\n        zap.Any("user", user))\n\n    // Process the update\n    if err := h.updateUserInDB(user); err != nil {\n        h.logger.Error("failed to update user",\n            zap.Error(err),\n            zap.Any("user", user))\n        http.Error(w, "Internal server error", http.StatusInternalServerError)\n        return\n    }\n\n    // Return sanitized response\n    sanitized := h.censor.Process(user)\n    json.NewEncoder(w).Encode(sanitized)\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Review your ",(0,o.jsx)(n.a,{href:"../configuration",children:"Configuration"})," settings"]}),"\n",(0,o.jsxs)(n.li,{children:["Learn about ",(0,o.jsx)(n.a,{href:"../type-handling/overview",children:"Type Support"})]}),"\n",(0,o.jsxs)(n.li,{children:["Check out ",(0,o.jsx)(n.a,{href:"../logger-handlers/zap",children:"Logger Integration"})]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);