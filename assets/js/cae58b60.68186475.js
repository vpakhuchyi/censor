"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[245],{8261:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"type-handling/overview","title":"Type Support","description":"Censor provides comprehensive support for Go\'s type system, allowing you to mask sensitive data across a wide range of data structures. This guide provides an overview of the types supported by Censor.","source":"@site/docs/type-handling/overview.md","sourceDirName":"type-handling","slug":"/type-handling/overview","permalink":"/censor/type-handling/overview","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/type-handling/overview.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Configuration","permalink":"/censor/configuration"},"next":{"title":"Basic Types","permalink":"/censor/type-handling/basic-types"}}');var t=n(4848),i=n(8453);const d={sidebar_position:1},c="Type Support",l={},a=[{value:"Supported Types",id:"supported-types",level:2},{value:"Basic Types",id:"basic-types",level:3},{value:"Complex Types",id:"complex-types",level:3},{value:"Special Types",id:"special-types",level:3},{value:"Unsupported Types",id:"unsupported-types",level:2},{value:"Format-Specific Behavior",id:"format-specific-behavior",level:2},{value:"Type-Specific Behavior",id:"type-specific-behavior",level:2},{value:"Strings",id:"strings",level:3},{value:"Maps",id:"maps",level:3},{value:"Structs",id:"structs",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"type-support",children:"Type Support"})}),"\n",(0,t.jsx)(s.p,{children:"Censor provides comprehensive support for Go's type system, allowing you to mask sensitive data across a wide range of data structures. This guide provides an overview of the types supported by Censor."}),"\n",(0,t.jsx)(s.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,t.jsx)(s.p,{children:"Censor supports the following Go types:"}),"\n",(0,t.jsx)(s.h3,{id:"basic-types",children:"Basic Types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type Category"}),(0,t.jsx)(s.th,{children:"Supported Types"}),(0,t.jsx)(s.th,{children:"Default Behavior"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"String"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"string"})}),(0,t.jsxs)(s.td,{children:["Masked by default, unless tagged with ",(0,t.jsx)(s.code,{children:'censor:"display"'})]})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Numeric"}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"int"}),", ",(0,t.jsx)(s.code,{children:"int8"}),", ",(0,t.jsx)(s.code,{children:"int16"}),", ",(0,t.jsx)(s.code,{children:"int32"}),", ",(0,t.jsx)(s.code,{children:"int64"}),", ",(0,t.jsx)(s.code,{children:"uint"}),", ",(0,t.jsx)(s.code,{children:"uint8"}),", ",(0,t.jsx)(s.code,{children:"uint16"}),", ",(0,t.jsx)(s.code,{children:"uint32"}),", ",(0,t.jsx)(s.code,{children:"uint64"}),", ",(0,t.jsx)(s.code,{children:"float32"}),", ",(0,t.jsx)(s.code,{children:"float64"})]}),(0,t.jsx)(s.td,{children:"Displayed as is"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Boolean"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"bool"})}),(0,t.jsx)(s.td,{children:"Displayed as is"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Time"}),(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"time.Time"})}),(0,t.jsx)(s.td,{children:"Formatted according to configuration"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Pointers"}),(0,t.jsx)(s.td,{children:"Pointers to any supported type"}),(0,t.jsx)(s.td,{children:"Dereferenced and processed by underlying type rules"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"basic-types",children:"Learn more about Basic Types"})}),"\n",(0,t.jsx)(s.h3,{id:"complex-types",children:"Complex Types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type Category"}),(0,t.jsx)(s.th,{children:"Supported Types"}),(0,t.jsx)(s.th,{children:"Default Behavior"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Structs"}),(0,t.jsx)(s.td,{children:"All struct types"}),(0,t.jsx)(s.td,{children:"Fields processed according to their types"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Maps"}),(0,t.jsx)(s.td,{children:"Maps with any key and value types"}),(0,t.jsx)(s.td,{children:"Keys can be displayed or masked, values processed by type"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Slices"}),(0,t.jsx)(s.td,{children:"Slices of any type"}),(0,t.jsx)(s.td,{children:"Elements processed according to their type"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Arrays"}),(0,t.jsx)(s.td,{children:"Arrays of any type"}),(0,t.jsx)(s.td,{children:"Elements processed according to their type"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"complex-types",children:"Learn more about Complex Types"})}),"\n",(0,t.jsx)(s.h3,{id:"special-types",children:"Special Types"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type Category"}),(0,t.jsx)(s.th,{children:"Supported Types"}),(0,t.jsx)(s.th,{children:"Default Behavior"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Custom Types"}),(0,t.jsx)(s.td,{children:"Type aliases, custom structs"}),(0,t.jsx)(s.td,{children:"Processed according to underlying type"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Interfaces"}),(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"interface{}"}),", ",(0,t.jsx)(s.code,{children:"any"})]}),(0,t.jsx)(s.td,{children:"Processed based on concrete type at runtime"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Custom Handlers"}),(0,t.jsx)(s.td,{children:"Any registered type"}),(0,t.jsx)(s.td,{children:"Processed by custom handler function"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"special-types",children:"Learn more about Special Types"})}),"\n",(0,t.jsx)(s.h2,{id:"unsupported-types",children:"Unsupported Types"}),"\n",(0,t.jsx)(s.p,{children:"The following Go types are not supported by Censor:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Type"}),(0,t.jsx)(s.th,{children:"Reason"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"chan"})}),(0,t.jsx)(s.td,{children:"Channels cannot be sanitized meaningfully"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"func"})}),(0,t.jsx)(s.td,{children:"Functions cannot be sanitized meaningfully"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"unsafe.Pointer"})}),(0,t.jsx)(s.td,{children:"Cannot safely process arbitrary memory"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.code,{children:"uintptr"})}),(0,t.jsx)(s.td,{children:"Cannot safely process arbitrary memory addresses"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsxs)(s.td,{children:[(0,t.jsx)(s.code,{children:"complex64"}),", ",(0,t.jsx)(s.code,{children:"complex128"})]}),(0,t.jsx)(s.td,{children:"Not commonly used for sensitive data"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"Attempting to process these types will result in an error."}),"\n",(0,t.jsx)(s.h2,{id:"format-specific-behavior",children:"Format-Specific Behavior"}),"\n",(0,t.jsx)(s.p,{children:"Censor supports two main output formats:"}),"\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Format"}),(0,t.jsx)(s.th,{children:"Description"}),(0,t.jsx)(s.th,{children:"Use Case"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"TEXT"}),(0,t.jsx)(s.td,{children:"Human-readable format"}),(0,t.jsx)(s.td,{children:"Console output, debugging"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"JSON"}),(0,t.jsx)(s.td,{children:"Structured format"}),(0,t.jsx)(s.td,{children:"APIs, logging, data interchange"})]})]})]}),"\n",(0,t.jsx)(s.p,{children:"The same data may be presented differently depending on the chosen format."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.a,{href:"format-specific",children:"Learn more about Format-Specific Behavior"})}),"\n",(0,t.jsx)(s.h2,{id:"type-specific-behavior",children:"Type-Specific Behavior"}),"\n",(0,t.jsx)(s.h3,{id:"strings",children:"Strings"}),"\n",(0,t.jsx)(s.p,{children:"Strings are masked by default, but can be configured to be displayed using struct tags:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"` // Will be displayed\n    Email    string                    // Will be masked\n    Password string `censor:"mask"`    // Will be masked (explicit)\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"maps",children:"Maps"}),"\n",(0,t.jsx)(s.p,{children:"Maps keys are processed according to a map key handler, and values are processed according to their types:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:'// Default behavior\nuser := map[string]string{\n    "id":       "123",          // Key is displayed, value is displayed (number pattern)\n    "email":    "user@example.com", // Key is displayed, value is masked\n    "password": "secret123",    // Key is displayed, value is masked\n}\n\n// TEXT: map[id:123 email:[CENSORED] password:[CENSORED]]\n// JSON: {"id":"123","email":"[CENSORED]","password":"[CENSORED]"}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"structs",children:"Structs"}),"\n",(0,t.jsx)(s.p,{children:"Structs are processed recursively, with each field being processed according to its type:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:'type User struct {\n    ID       string `censor:"display"`\n    Email    string\n    Address  Address\n}\n\ntype Address struct {\n    Street  string\n    City    string\n    ZipCode string\n}\n\n// All string fields except ID will be masked\n'})}),"\n",(0,t.jsx)(s.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,t.jsx)(s.p,{children:"Here's a complete example showing how various types are processed:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "time"\n    "github.com/vpakhuchyi/censor"\n)\n\ntype Address struct {\n    Street  string\n    City    string\n    ZipCode string\n}\n\ntype User struct {\n    ID        string    `censor:"display"`\n    Email     string\n    Password  string\n    Age       int\n    Active    bool\n    CreatedAt time.Time\n    Address   Address\n    Tags      []string\n    Metadata  map[string]string\n}\n\nfunc main() {\n    // Create a Censor instance\n    c := censor.New()\n\n    // Create a user\n    user := User{\n        ID:        "123",\n        Email:     "user@example.com",\n        Password:  "secret123",\n        Age:       30,\n        Active:    true,\n        CreatedAt: time.Date(2023, 1, 1, 12, 0, 0, 0, time.UTC),\n        Address: Address{\n            Street:  "123 Main St",\n            City:    "New York",\n            ZipCode: "10001",\n        },\n        Tags: []string{"premium", "active"},\n        Metadata: map[string]string{\n            "last_login": "2023-01-01",\n            "api_key":    "sk_live_123456789",\n        },\n    }\n\n    // Process the data\n    masked := c.Process(user)\n    fmt.Printf("%+v\\n", masked)\n}\n\n// Output: \n// {ID:123 Email:[CENSORED] Password:[CENSORED] Age:30 Active:true CreatedAt:2023-01-01 12:00:00 +0000 UTC Address:{Street:[CENSORED] City:[CENSORED] ZipCode:[CENSORED]} Tags:[[CENSORED] [CENSORED]] Metadata:map[api_key:[CENSORED] last_login:[CENSORED]]}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(s.p,{children:"To learn more about each type category:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"basic-types",children:"Basic Types"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"complex-types",children:"Complex Types"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"special-types",children:"Special Types"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"format-specific",children:"Format-Specific"})," behavior"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>c});var r=n(6540);const t={},i=r.createContext(t);function d(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);