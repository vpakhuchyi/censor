"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[341],{5493:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"logger-handlers/slog","title":"Slog Handler","description":"The Slog handler provides integration with the log/slog package from the Go standard library, allowing you to automatically mask sensitive data in your logs.","source":"@site/docs/logger-handlers/slog.md","sourceDirName":"logger-handlers","slug":"/logger-handlers/slog","permalink":"/censor/logger-handlers/slog","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/logger-handlers/slog.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1744746546000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docs","previous":{"title":"Zap","permalink":"/censor/logger-handlers/zap"},"next":{"title":"Zerolog","permalink":"/censor/logger-handlers/zerolog"}}');var r=o(4848),t=o(8453);const i={sidebar_position:1},l="Slog Handler",a={},d=[{value:"Overview",id:"overview",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Understanding Logger Components",id:"understanding-logger-components",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Censor-specific Options",id:"censor-specific-options",level:3},{value:"Standard Slog Options",id:"standard-slog-options",level:3},{value:"Supported Logger Methods",id:"supported-logger-methods",level:2},{value:"Important Notes",id:"important-notes",level:2},{value:"Next Steps",id:"next-steps",level:2}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"slog-handler",children:"Slog Handler"})}),"\n",(0,r.jsxs)(n.p,{children:["The Slog handler provides integration with the ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/log/slog",children:"log/slog"})," package from the Go standard library, allowing you to automatically mask sensitive data in your logs."]}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The Slog handler is a configurable logging handler that applies censoring to log entries and fields, overriding the original values before passing them to the output. It's designed to work with JSON output format, providing structured logging with automatic sensitive data masking."}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsx)(n.p,{children:"Here's a simple example of how to use the Slog handler:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Define the configuration.  \ncfg := censor.Config{\n    Encoder: censor.EncoderConfig{\n        DisplayMapType: true,\n        MaskValue:     "[CENSORED]", \n        // Other configuration options...\n    },\n}\n  \n// Initialize a censor instance with the specified configuration.\nc, err := censor.NewWithOpts(censor.WithConfig(&cfg))\nif err != nil {\n    // Handle error.\n}\n  \n// Create and register a new slog handler with the initialized instance.\nopts := []sloghandler.Option{sloghandler.WithCensor(c)}\nlog := slog.New(sloghandler.NewJSONHandler(opts...))\n\n// Use logger as usual.\nlog.Info("user", slog.Any("payload", payload))\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"The handler currently only supports JSON output format. Text format support is planned for future releases."})}),"\n",(0,r.jsx)(n.h2,{id:"understanding-logger-components",children:"Understanding Logger Components"}),"\n",(0,r.jsx)(n.p,{children:"When working with the Slog logger, we can identify several key components:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"time"}),": The timestamp of the log entry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"level"}),": The log level (INFO, DEBUG, WARN, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"msg"}),": The main log message"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"source"}),": Optional source information (file, line, function)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"attributes"}),": Additional key-value pairs of data"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The handler processes all attribute values to ensure sensitive data is properly masked while maintaining the structure and readability of your logs."}),"\n",(0,r.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,r.jsx)(n.p,{children:"The Slog handler provides two types of configuration options:"}),"\n",(0,r.jsx)(n.h3,{id:"censor-specific-options",children:"Censor-specific Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WithCensor(censor *censor.Processor)"}),": Sets a custom Censor processor instance for the Slog handler"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"standard-slog-options",children:"Standard Slog Options"}),"\n",(0,r.jsx)(n.p,{children:"The handler also supports standard slog options that are passed through to the underlying JSON handler:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WithOut(w io.Writer)"}),": Sets the output destination (defaults to os.Stdout)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WithAddSource()"}),": Enables source file and line number information in logs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WithLevel(level slog.Leveler)"}),": Sets the minimum log level"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WithReplaceAttr(func(groups []string, a slog.Attr) slog.Attr)"}),": Allows custom attribute transformation"]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["The standard slog options are not Censor-specific features. They are standard options provided by the ",(0,r.jsx)(n.code,{children:"log/slog"})," package that we pass through to the underlying JSON handler. These options are processed according to the standard slog logic."]})}),"\n",(0,r.jsx)(n.p,{children:"Example with custom configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'censorInst := censor.New()\nopts := []Option{\n    WithOut(os.Stdout),           // Standard slog option.\n    WithCensor(censorInst),       // Censor-specific option.\n    WithAddSource(),              // Standard slog option.\n    WithLevel(slog.LevelDebug),   // Standard slog option.\n    WithReplaceAttr(func(groups []string, a slog.Attr) slog.Attr {\n        if a.Key == "msg" {\n            return slog.Any("msg", "replaced msg")\n        }\n        return a\n    }),                          // Standard slog option.\n}\n\nhandler := NewJSONHandler(opts...)\nlog := slog.New(handler)\nlog.Info("user", slog.Any("payload", u))\n'})}),"\n",(0,r.jsx)(n.h2,{id:"supported-logger-methods",children:"Supported Logger Methods"}),"\n",(0,r.jsx)(n.p,{children:"The handler fully supports all standard Slog logger methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Basic logging methods.\nInfo(msg string, args ...any)\nDebug(msg string, args ...any)\nWarn(msg string, args ...any)\nError(msg string, args ...any)\n\n// With methods.\nWith(args ...any) *slog.Logger\n\n// Group methods.\nWithGroup(name string) *slog.Logger\n"})}),"\n",(0,r.jsx)(n.h2,{id:"important-notes",children:"Important Notes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance Considerations"}),": The handler processes all attribute values to ensure sensitive data is properly masked. This may have a slight performance impact compared to standard logging."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"/censor/type-handling/overview",children:"Type Support"})," options"]}),"\n",(0,r.jsxs)(n.li,{children:["See ",(0,r.jsx)(n.a,{href:"/censor/configuration",children:"Configuration"})," for customization options"]}),"\n",(0,r.jsxs)(n.li,{children:["Check out ",(0,r.jsx)(n.a,{href:"/censor/examples/data-leak-prevention",children:"Examples"})," for real-world usage"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var s=o(6540);const r={},t=s.createContext(r);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);