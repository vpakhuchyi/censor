"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[635],{1911:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"basic-usage","title":"Basic Usage","description":"This guide covers the fundamental usage patterns of Censor, helping you get started with data masking in your Go applications.","source":"@site/docs/basic-usage.md","sourceDirName":".","slug":"/basic-usage","permalink":"/censor/basic-usage","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/basic-usage.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2}}');var i=s(4848),t=s(8453);const a={sidebar_position:2},o="Basic Usage",c={},d=[{value:"Installation",id:"installation",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Working with Different Types",id:"working-with-different-types",level:2},{value:"Strings",id:"strings",level:3},{value:"Maps",id:"maps",level:3},{value:"Slices",id:"slices",level:3},{value:"Nested Structures",id:"nested-structures",level:3},{value:"Using Struct Tags",id:"using-struct-tags",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Integration with JSON",id:"integration-with-json",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Processing Before Logging",id:"processing-before-logging",level:3},{value:"Processing HTTP Responses",id:"processing-http-responses",level:3},{value:"Bulk Processing",id:"bulk-processing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basic-usage",children:"Basic Usage"})}),"\n",(0,i.jsx)(n.p,{children:"This guide covers the fundamental usage patterns of Censor, helping you get started with data masking in your Go applications."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.p,{children:"First, install Censor using Go modules:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go get -u github.com/vpakhuchyi/censor\n"})}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.p,{children:"Here's a simple example to get you started:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "fmt"\n    "github.com/vpakhuchyi/censor"\n)\n\nfunc main() {\n    // Create a new Censor instance with default configuration\n    c := censor.New()\n\n    // Define a struct with sensitive data\n    type User struct {\n        ID       string `censor:"display"` // Will be visible\n        Email    string                    // Will be masked\n        Password string                    // Will be masked\n    }\n\n    // Create a user with sensitive data\n    user := User{\n        ID:       "123",\n        Email:    "user@example.com",\n        Password: "secret123",\n    }\n\n    // Process the data\n    masked := c.Process(user)\n\n    // Print the result\n    fmt.Printf("%+v\\n", masked)\n    // Output: {ID:123 Email:[CENSORED] Password:[CENSORED]}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-different-types",children:"Working with Different Types"}),"\n",(0,i.jsx)(n.h3,{id:"strings",children:"Strings"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Direct string processing\nsensitive := "my-password-123"\nmasked := c.Process(sensitive)\n// Result: "[CENSORED]"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"maps",children:"Maps"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Map with sensitive data\ndata := map[string]interface{}{\n    "id":       "123",\n    "email":    "user@example.com",\n    "password": "secret123",\n}\n\nmasked := c.Process(data)\n// Result: map[id:123 email:[CENSORED] password:[CENSORED]]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"slices",children:"Slices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Slice of sensitive data\nemails := []string{\n    "user1@example.com",\n    "user2@example.com",\n}\n\nmasked := c.Process(emails)\n// Result: [[CENSORED] [CENSORED]]\n'})}),"\n",(0,i.jsx)(n.h3,{id:"nested-structures",children:"Nested Structures"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type Address struct {\n    Street  string\n    City    string\n    Country string\n}\n\ntype User struct {\n    ID      string  `censor:"display"`\n    Email   string\n    Address Address\n}\n\nuser := User{\n    ID:    "123",\n    Email: "user@example.com",\n    Address: Address{\n        Street:  "123 Secret St",\n        City:    "Anytown",\n        Country: "USA",\n    },\n}\n\nmasked := c.Process(user)\n// Result: {ID:123 Email:[CENSORED] Address:{Street:[CENSORED] City:[CENSORED] Country:[CENSORED]}}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"using-struct-tags",children:"Using Struct Tags"}),"\n",(0,i.jsx)(n.p,{children:"Censor supports two struct tags to control field visibility:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    // Always visible\n    ID        string `censor:"display"`\n    Username  string `censor:"display"`\n\n    // Always masked\n    Password  string `censor:"mask"`\n    APIKey    string `censor:"mask"`\n\n    // Masked by default (no tag needed)\n    Email     string\n    SSN       string\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Censor is designed to handle errors gracefully:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Nil values are handled safely\nvar data *User\nmasked := c.Process(data)\n// Result: nil\n\n// Invalid types are handled\nch := make(chan int)\nmasked := c.Process(ch)\n// Result: "[CENSORED]"\n\n// Circular references are detected\ntype Node struct {\n    Next *Node\n    Data string\n}\n\nnode := &Node{Data: "sensitive"}\nnode.Next = node\nmasked := c.Process(node)\n// Result: handled without infinite recursion\n'})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-json",children:"Integration with JSON"}),"\n",(0,i.jsx)(n.p,{children:"Censor works seamlessly with JSON encoding/decoding:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type User struct {\n    ID       string `json:"id" censor:"display"`\n    Email    string `json:"email"`\n    Password string `json:"password"`\n}\n\n// Create a user\nuser := User{\n    ID:       "123",\n    Email:    "user@example.com",\n    Password: "secret123",\n}\n\n// Process before JSON encoding\nmasked := c.Process(user)\njsonData, err := json.Marshal(masked)\nif err != nil {\n    panic(err)\n}\n\nfmt.Println(string(jsonData))\n// Output: {"id":"123","email":"[CENSORED]","password":"[CENSORED]"}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.p,{children:"Censor is designed to be efficient, but here are some tips for optimal performance:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Reuse Censor Instances"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Good: Create once, reuse\nc := censor.New()\nfor data := range dataStream {\n    masked := c.Process(data)\n    // Use masked data\n}\n\n// Bad: Creating new instance for each operation\nfor data := range dataStream {\n    c := censor.New()\n    masked := c.Process(data)\n    // Use masked data\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Appropriate Types"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Good: Use concrete types\ntype User struct {\n    ID    string\n    Email string\n}\n\n// Less Efficient: Use map[string]interface{}\ndata := map[string]interface{}{\n    "id":    "123",\n    "email": "user@example.com",\n}\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Minimize Deep Nesting"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Good: Flat structure\ntype User struct {\n    ID      string\n    Email   string\n    Address string\n}\n\n// Less Efficient: Deep nesting\ntype User struct {\n    ID      string\n    Email   string\n    Address struct {\n        Street struct {\n            Name   string\n            Number string\n        }\n        City    string\n        Country string\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,i.jsx)(n.h3,{id:"processing-before-logging",children:"Processing Before Logging"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'logger := log.New(os.Stdout, "", log.LstdFlags)\nc := censor.New()\n\nfunc logUser(user User) {\n    // Mask sensitive data before logging\n    masked := c.Process(user)\n    logger.Printf("User data: %+v", masked)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"processing-http-responses",children:"Processing HTTP Responses"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func handleUser(w http.ResponseWriter, r *http.Request) {\n    user := User{\n        ID:       "123",\n        Email:    "user@example.com",\n        Password: "secret123",\n    }\n\n    // Mask sensitive data before sending response\n    masked := c.Process(user)\n    json.NewEncoder(w).Encode(masked)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"bulk-processing",children:"Bulk Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func processUsers(users []User) []User {\n    c := censor.New()\n    masked := make([]User, len(users))\n    \n    for i, user := range users {\n        masked[i] = c.Process(user).(User)\n    }\n    \n    return masked\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"configuration",children:"Configuration"})," options"]}),"\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.a,{href:"type-handling/overview",children:"Type Support"})," for types"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out ",(0,i.jsx)(n.a,{href:"logger-handlers/zap",children:"Logger Integration"})," for logging frameworks"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var r=s(6540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);