"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[179],{7376:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>g});const s=JSON.parse('{"id":"logger-handlers/zerolog","title":"Zerolog Integration","description":"This guide shows you how to integrate Censor with the Zerolog logging framework.","source":"@site/docs/logger-handlers/zerolog.md","sourceDirName":"logger-handlers","slug":"/logger-handlers/zerolog","permalink":"/censor/logger-handlers/zerolog","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/logger-handlers/zerolog.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"Slog","permalink":"/censor/logger-handlers/slog"},"next":{"title":"Data Leak Prevention","permalink":"/censor/examples/data-leak-prevention"}}');var o=r(4848),t=r(8453);const i={sidebar_position:4},a="Zerolog Integration",l={},g=[{value:"Installation",id:"installation",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Custom Mask Value",id:"custom-mask-value",level:3},{value:"Exclude Patterns",id:"exclude-patterns",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Custom Field Processors",id:"custom-field-processors",level:3},{value:"Field Name Mapping",id:"field-name-mapping",level:3},{value:"Complete Example",id:"complete-example",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"zerolog-integration",children:"Zerolog Integration"})}),"\n",(0,o.jsx)(n.p,{children:"This guide shows you how to integrate Censor with the Zerolog logging framework."}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.p,{children:"Install the required packages:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"go get -u github.com/rs/zerolog\ngo get -u github.com/vpakhuchyi/censor\n"})}),"\n",(0,o.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,o.jsx)(n.p,{children:"Here's a simple example of using Censor with Zerolog:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "os"\n    "github.com/rs/zerolog"\n    "github.com/vpakhuchyi/censor"\n    "github.com/vpakhuchyi/censor/logger/zerolog"\n)\n\nfunc main() {\n    // Create a Censor instance\n    c := censor.New()\n\n    // Create a Zerolog logger with Censor handler\n    logger := zerolog.New(os.Stdout).With().Logger()\n    logger = censorlog.WithCensor(logger, c)\n\n    // Define a struct with sensitive data\n    type User struct {\n        ID       string `json:"id" censor:"display"`\n        Email    string `json:"email"`\n        Password string `json:"password"`\n    }\n\n    // Create a user\n    user := User{\n        ID:       "123",\n        Email:    "user@example.com",\n        Password: "secret123",\n    }\n\n    // Log the user data (safely)\n    logger.Info().Interface("user", user).Msg("user login")\n    // Output: {"level":"info","user":{"id":"123","email":"[CENSORED]","password":"[CENSORED]"},"message":"user login"}\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,o.jsx)(n.h3,{id:"custom-mask-value",children:"Custom Mask Value"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Create a Censor instance with custom mask value\nc := censor.New(censor.WithMaskValue("[REDACTED]"))\n\n// Create a logger with the Censor instance\nlogger := zerolog.New(os.Stdout).With().Logger()\nlogger = censorlog.WithCensor(logger, c)\n\n// Log data\nlogger.Info().Interface("user", user).Msg("user login")\n// Output: {"level":"info","user":{"id":"123","email":"[REDACTED]","password":"[REDACTED]"},"message":"user login"}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"exclude-patterns",children:"Exclude Patterns"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Create a Censor instance with exclude patterns\nc := censor.New(\n    censor.WithExcludePatterns([]string{\n        `\\d{4}-\\d{4}-\\d{4}-\\d{4}`, // Credit card numbers\n        `\\d{3}-\\d{2}-\\d{4}`,       // SSN\n    }),\n)\n\n// Create a logger with the Censor instance\nlogger := zerolog.New(os.Stdout).With().Logger()\nlogger = censorlog.WithCensor(logger, c)\n\n// Log data with patterns that match exclude patterns\ntype Payment struct {\n    CardNumber string `json:"card_number"`\n    SSN        string `json:"ssn"`\n}\n\npayment := Payment{\n    CardNumber: "4111-1111-1111-1111",\n    SSN:        "123-45-6789",\n}\n\nlogger.Info().Interface("payment", payment).Msg("payment processed")\n// Output: {"level":"info","payment":{"card_number":"4111-1111-1111-1111","ssn":"123-45-6789"},"message":"payment processed"}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,o.jsx)(n.h3,{id:"custom-field-processors",children:"Custom Field Processors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Create a Censor instance with custom field processor\nc := censor.New(\n    censor.WithFieldProcessor("email", func(value interface{}) interface{} {\n        if email, ok := value.(string); ok {\n            // Mask email but show domain\n            parts := strings.Split(email, "@")\n            if len(parts) == 2 {\n                return "***@" + parts[1]\n            }\n        }\n        return "[CENSORED]"\n    }),\n)\n\n// Create a logger with the Censor instance\nlogger := zerolog.New(os.Stdout).With().Logger()\nlogger = censorlog.WithCensor(logger, c)\n\n// Log data\nlogger.Info().Interface("user", user).Msg("user login")\n// Output: {"level":"info","user":{"id":"123","email":"***@example.com","password":"[CENSORED]"},"message":"user login"}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"field-name-mapping",children:"Field Name Mapping"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Create a Censor instance with field name mapping\nc := censor.New(\n    censor.WithFieldNameMapper(func(name string) string {\n        return strings.ToUpper(name)\n    }),\n)\n\n// Create a logger with the Censor instance\nlogger := zerolog.New(os.Stdout).With().Logger()\nlogger = censorlog.WithCensor(logger, c)\n\n// Log data\nlogger.Info().Interface("user", user).Msg("user login")\n// Output: {"level":"info","user":{"ID":"123","EMAIL":"[CENSORED]","PASSWORD":"[CENSORED]"},"message":"user login"}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"complete-example",children:"Complete Example"}),"\n",(0,o.jsx)(n.p,{children:"Here's a complete example showing various Zerolog integration features:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "os"\n    "time"\n    "github.com/rs/zerolog"\n    "github.com/vpakhuchyi/censor"\n    "github.com/vpakhuchyi/censor/logger/zerolog"\n)\n\nfunc main() {\n    // Create a Censor instance with custom configuration\n    c := censor.New(\n        censor.WithMaskValue("[REDACTED]"),\n        censor.WithExcludePatterns([]string{\n            `\\d{4}-\\d{4}-\\d{4}-\\d{4}`,\n        }),\n    )\n\n    // Create a Zerolog logger with Censor handler\n    logger := zerolog.New(os.Stdout).\n        With().\n        Timestamp().\n        Logger()\n    logger = censorlog.WithCensor(logger, c)\n\n    // Define a struct with sensitive data\n    type User struct {\n        ID          string    `json:"id" censor:"display"`\n        Email       string    `json:"email"`\n        Password    string    `json:"password"`\n        APIKey      string    `json:"api_key"`\n        LastLogin   time.Time `json:"last_login"`\n        CreditCard  string    `json:"credit_card"`\n    }\n\n    // Create a user\n    user := User{\n        ID:          "123",\n        Email:       "user@example.com",\n        Password:    "secret123",\n        APIKey:      "sk_live_123456789",\n        LastLogin:   time.Now(),\n        CreditCard:  "4111-1111-1111-1111",\n    }\n\n    // Log user actions\n    logger.Info().\n        Interface("user", user).\n        Str("action", "login").\n        Msg("user logged in")\n\n    // Log errors safely\n    if err := processPayment(user); err != nil {\n        logger.Error().\n            Err(err).\n            Interface("user", user).\n            Msg("payment processing failed")\n    }\n}\n\nfunc processPayment(user User) error {\n    // Simulate payment processing\n    return nil\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Logger Initialization"}),": Initialize your logger once and reuse it throughout your application."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Structured Logging"}),": Use structured logging with fields to make logs more searchable and analyzable."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Error Handling"}),": Always include error information when logging errors, but ensure sensitive data is masked."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": Zerolog is designed for high performance. The Censor integration maintains this performance by minimizing allocations."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Learn about ",(0,o.jsx)(n.a,{href:"slog",children:"Slog Integration"})]}),"\n",(0,o.jsxs)(n.li,{children:["Check out ",(0,o.jsx)(n.a,{href:"zap",children:"Zap Integration"})]}),"\n",(0,o.jsxs)(n.li,{children:["Review ",(0,o.jsx)(n.a,{href:"../configuration",children:"Configuration"})," options"]}),"\n",(0,o.jsxs)(n.li,{children:["See ",(0,o.jsx)(n.a,{href:"../examples/data-leak-prevention",children:"Examples"})," for more use cases"]}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var s=r(6540);const o={},t=s.createContext(o);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);