"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[634],{6269:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"examples/complex","title":"Real-World Examples","description":"Here are some realistic examples of using Censor in common scenarios where data sanitization is crucial.","source":"@site/docs/examples/complex.md","sourceDirName":"examples","slug":"/examples/complex","permalink":"/censor/examples/complex","draft":false,"unlisted":false,"editUrl":"https://github.com/vpakhuchyi/censor-doc/tree/main/docs/examples/complex.md","tags":[],"version":"current","lastUpdatedBy":"Viktor","lastUpdatedAt":1743858422000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Simple Examples","permalink":"/censor/examples/simple"},"next":{"title":"Advanced Configuration","permalink":"/censor/examples/advanced-configuration"}}');var i=s(4848),r=s(8453);const a={sidebar_position:2},o="Real-World Examples",c={},l=[{value:"Payment Processing System",id:"payment-processing-system",level:2},{value:"User Authentication System",id:"user-authentication-system",level:2},{value:"Healthcare Data Processing",id:"healthcare-data-processing",level:2},{value:"Best Practices Demonstrated",id:"best-practices-demonstrated",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"real-world-examples",children:"Real-World Examples"})}),"\n",(0,i.jsx)(n.p,{children:"Here are some realistic examples of using Censor in common scenarios where data sanitization is crucial."}),"\n",(0,i.jsx)(n.h2,{id:"payment-processing-system",children:"Payment Processing System"}),"\n",(0,i.jsx)(n.p,{children:"In a payment processing system, you need to handle sensitive financial information while ensuring it's properly masked in logs:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/vpakhuchyi/censor"\n    censorlog "github.com/vpakhuchyi/censor/handlers/zap"\n    "go.uber.org/zap"\n)\n\ntype PaymentRequest struct {\n    OrderID      string `censor:"display"` // Safe to display\n    Amount       float64 `censor:"display"` // Safe to display\n    Currency     string `censor:"display"` // Safe to display\n    CardNumber   string // Sensitive - will be masked\n    CVV         string // Sensitive - will be masked\n    ExpiryDate  string // Sensitive - will be masked\n    BillingInfo BillingInfo\n}\n\ntype BillingInfo struct {\n    Name    string `censor:"display"` // Safe to display\n    Email   string // Sensitive - will be masked\n    Address string // Sensitive - will be masked\n}\n\nfunc main() {\n    // Configure Censor with credit card pattern\n    cfg := censor.Config{\n        Formatter: censor.FormatterConfig{\n            MaskValue: "[REDACTED]",\n            ExcludePatterns: []string{\n                `\\d{4}-\\d{4}-\\d{4}-\\d{4}`, // Credit card pattern\n                `\\d{3,4}`,                  // CVV pattern\n            },\n        },\n    }\n\n    // Initialize logger with Censor\n    logger := initLogger()\n\n    // Process payment\n    payment := PaymentRequest{\n        OrderID:    "ORD-123456",\n        Amount:     99.99,\n        Currency:   "USD",\n        CardNumber: "4111-1111-1111-1111",\n        CVV:       "123",\n        ExpiryDate: "12/25",\n        BillingInfo: BillingInfo{\n            Name:    "John Doe",\n            Email:   "john@example.com",\n            Address: "123 Main St, City, Country",\n        },\n    }\n\n    // Log payment processing - sensitive data will be masked\n    logger.Info("Processing payment",\n        zap.Any("payment", payment),\n    )\n    // Output will mask card number, CVV, and personal information\n}\n\nfunc initLogger() *zap.Logger {\n    // Logger initialization code...\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"user-authentication-system",children:"User Authentication System"}),"\n",(0,i.jsx)(n.p,{children:"Example of handling user authentication data with proper masking of sensitive information:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "encoding/json"\n    "net/http"\n    \n    "github.com/vpakhuchyi/censor"\n)\n\ntype AuthRequest struct {\n    Username string `censor:"display" json:"username"`\n    Password string `json:"password"`           // Will be masked\n    Token    string `json:"token"`             // Will be masked\n    Device   DeviceInfo `json:"device"`\n}\n\ntype DeviceInfo struct {\n    ID       string `censor:"display" json:"id"`\n    IP       string `json:"ip"`                // Will be masked\n    UserAgent string `censor:"display" json:"user_agent"`\n}\n\ntype AuthResponse struct {\n    Success bool   `censor:"display" json:"success"`\n    Token   string `json:"token"`              // Will be masked\n}\n\nfunc handleAuth(w http.ResponseWriter, r *http.Request) {\n    var req AuthRequest\n    if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n\n    // Log the request with sensitive data masked\n    logger.Info("Auth request received",\n        "request", censor.Format(req),\n    )\n\n    // Process authentication...\n    \n    resp := AuthResponse{\n        Success: true,\n        Token:   "eyJhbGciOiJIUzI1NiIs...",\n    }\n\n    // Log the response with sensitive data masked\n    logger.Info("Auth response",\n        "response", censor.Format(resp),\n    )\n\n    json.NewEncoder(w).Encode(resp)\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"healthcare-data-processing",children:"Healthcare Data Processing"}),"\n",(0,i.jsx)(n.p,{children:"Example of handling sensitive healthcare information:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "github.com/vpakhuchyi/censor"\n)\n\ntype PatientRecord struct {\n    PatientID   string `censor:"display"` // Safe to display\n    VisitDate   string `censor:"display"` // Safe to display\n    Department  string `censor:"display"` // Safe to display\n    \n    // Sensitive information - will be masked\n    Name        string\n    SSN         string\n    Diagnosis   string\n    Medications []string\n    Notes       string\n    \n    // Contact information - will be masked\n    Contact     ContactInfo\n}\n\ntype ContactInfo struct {\n    Phone   string\n    Email   string\n    Address string\n}\n\nfunc processPatientRecord(record PatientRecord) {\n    // Configure Censor with healthcare-specific patterns\n    cfg := censor.Config{\n        Formatter: censor.FormatterConfig{\n            MaskValue: "[PHI REDACTED]",\n            ExcludePatterns: []string{\n                `\\d{3}-\\d{2}-\\d{4}`,     // SSN pattern\n                `\\d{3}[-.]?\\d{3}[-.]?\\d{4}`, // Phone number pattern\n            },\n        },\n    }\n\n    censor.NewWithOpts(censor.WithConfig(&cfg))\n\n    // Process and log the record\n    // All sensitive health information will be masked\n    logger.Info("Processing patient record",\n        "record", censor.Format(record),\n    )\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"best-practices-demonstrated",children:"Best Practices Demonstrated"}),"\n",(0,i.jsx)(n.p,{children:"These examples demonstrate several best practices:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Selective Masking"}),": Using ",(0,i.jsx)(n.code,{children:'censor:"display"'})," tag to show safe information while masking sensitive data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern Matching"}),": Using regex patterns to catch sensitive data formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nested Structures"}),": Proper handling of nested sensitive information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration"}),": Seamless integration with logging and HTTP handlers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compliance"}),": Adhering to data protection requirements (GDPR, HIPAA, PCI DSS)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Each example shows how Censor can be used in real-world scenarios where data protection is critical. The examples cover different aspects of data sensitivity and show how to properly configure Censor for each use case."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);